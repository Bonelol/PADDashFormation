const _localTranslating = {
    webpage_title: `P&D ${teamsCount}P Formation Maker`,
	addition_display: "Additional display",
    title_blank: "Input Formation Title",
    detail_blank: "Input Detail",
    sort_name:{
        sort_none: "Nope",
        sort_id: "Cards Id",
        sort_attrs : "Attribute",
        sort_evoRootId: "Cards Evolution Root",
        sort_evoRoot_Attrs : "Cards Evolution Root's Attribute",
        sort_rarity: "Rarity",
        sort_cost: "Cost",
        sort_skillLv1: "Maximum Skill Turn",
        sort_skillLvMax: "Minimum Skill Turn",
        sort_hpMax110: "Max HP",
        sort_atkMax110: "Max ATK",
        sort_rcvMax110: "Max RCV",
        sort_hpMax110_awoken: "Max HP (+Awoken)",
        sort_atkMax110_awoken: "Max ATK (+Awoken)",
        sort_rcvMax110_awoken: "Max RCV (+Awoken)",
        sort_abilityIndex_awoken: "Maximum Weighted Ability Index (+Awakening)",
    },
    force_reload_data: `Force refresh data`,
    skill_parse: {
        skill: {
			unknown: tp`Unkonwn skill type: ${'type'}`,
			active_turns: tp`${'actionSkill'}, for ${'turns'} turns`,
			random_skills: tp`Random Activates these skills:${'skills'}`,
			damage_enemy: tp`Inflicts ${'times'}${'damage'} ${'attr'} attack on ${'target'}${'totalDamage'}`,
			damage_enemy_times: tp`${'times'} `,
			damage_enemy_count: tp` (${'damage'} in total)`,
            //Inflicts a 50x attack to 1 enemy and recover 100% of the damage. Reduces unmatchable orb status by 9999 turns. 9999 turn awoken bind recovery.
			vampire: tp`${'damage_enemy'} and ${'icon'}recover ${'heal'} of the damage`,
			delay: tp`${'icon'}Delays enemies' next move`,
			mass_attack: tp`${'icon'}Mass attacks`,
			leader_change: tp`${'icon'}Switches ${'target'} with Leader Monster, use again to switch back`,
			no_skyfall: tp`${'icon'}No Skyfall Combos`,
			self_harm: tp`${'icon'}Reduces ${'stats'} by ${'value'}`,
            heal: tp`${'icon'}Recover ${'value'} ${'stats'}`,
			unbind_normal: tp`${'icon'}Recovery bind by ${'turns'} turns`,
			unbind_awakenings: tp`${'icon'}Recovery awoken bind by ${'turns'} turns`,
			unbind_matches: tp`${'icon'}Reduces unmatchable orb by ${'turns'} turns`,
			bind_skill: tp`${'icon'}Unable to use skills`,
            defense_break: tp`${'icon'}Reduce enemy defense by ${'value'}`,
            poison: tp`${'icon'}Poisons ${'target'}, reduce ${'stats'} with ${'belong_to'} ${'value'} per turns`,
			time_extend: tp`${'icon'}Orb move time ${'value'}`,
			follow_attack: tp`${'icon'}Bonus attack equal to ${'belong_to'} ${'value'} when matching Orbs (Consider the ${'target'}'s defense)`,
			follow_attack_fixed: tp`inflicts ${'damage'} ${'attr'} damage`,
            auto_heal_buff: tp`${'icon'}Heal ${'value'} ${'stats'} every turn`,
			auto_heal: tp`${'icon'}Heal ${'stats'} by ${'belong_to'} ${'value'} after matching orbs`,
			ctw: tp`${'icon'}Move orbs freely for ${'value'}`,
			gravity: tp`${'icon'}Reduce ${'target'} ${'value'}`,
			resolve: tp`${'icon'}Survive a single hit when ${'stats'}≧${'min'}`,
			board_change: tp`Change all orbs to ${'orbs'}`,
			skill_boost: tp`Team's skills charge ${'icon'}${'turns'}`,
			add_combo: tp`Adds ${'value'} combos${'icon'}`,
			fixed_time: tp`[${'icon'}Fixed orb move time: ${'value'}]`,
			min_match_length: tp`unable to erase ${'unmatchable'} Orbs or less`, //matchable, unmatchable
			drop_refresh: tp`Replaces all orbs`,
			drum: tp`Plus a drumming sound is made when Orbs are moved`,
			auto_path: tp`Shows 3 combo path (Norm. Dungeon & 3 linked Orbs only)`,
			board7x6: tp`[${'icon'}7x6 board]`,
			counter_attack: tp`When attacked by an ${'target'}, ${'prob'}${'value'} ${'attr'} ${'icon'}counterattack`,	
			change_orbs: tp`Changes ${'from'} to ${'to'}`,
			generate_orbs: tp`${'exclude'}生成${'orbs'}各${'value'}个`,
			fixed_orbs: tp`Changes the ${'position'} to ${'orbs'}`,
			orb_drop_increase: tp`${'orbs'}的掉落率提高到${'value'}`,
			orb_drop_increase_flag: tp`${'value'}掉落${'flag'}${'orbs'}`,
			attr_absorb: tp`${'icon'}属性吸收`,
			combo_absorb: tp`${'icon'}连击吸收`,
			damage_absorb: tp`${'icon'}伤害吸收`,
			damage_void: tp`${'icon'}伤害无效`,
			void_enemy_buff: tp`敌人的 ${'buff'} 无效化`,
			change_attribute: tp`将${'target'}变为${'attrs'}`,
			set_orb_state_enhanced: tp`${'icon'}强化${'orbs'}（每颗宝珠效力增加${'value'}）`,
			set_orb_state_locked: tp`将${'orbs'}${'icon'}锁定${'value'}`,
			set_orb_state_unlocked: tp`${'icon'}Unlocks all orbs`,
			set_orb_state_bound: tp`${'orbs'} are unmatchable`,
			rate_multiply: tp`作为队长进入地下城时，${'rate'}变为${'value'}`,
			rate_multiply_drop: tp`${'icon'}怪物蛋掉落率`,
			rate_multiply_coin: tp`${'icon'}金币掉落率`,
			rate_multiply_exp: tp`${'icon'}等级经验倍率`,
			reduce_damage: tp`${'condition'}Reduces${'attrs'} damage taken by ${'value'}`,
			power_up: tp`${'condition'}${'targets'}${'value'}${'reduceDamage'}${'addCombo'}${'followAttack'}`,
			power_up_targets: tp`${'attrs'}${'types'}'s `,
            henshin: tp`Transforms into ${'card'}`,
			void_poison: tp`消除${'poison'}时不会受到毒伤害`,
			skill_proviso: tp`${'condition'}才能发动后续效果`,
		},
		power: {
            unknown: tp`[ Unkonwn power up: ${'type'} ]`,
			scale_attributes: tp`${'orbs'}中${'min'}种属性同时攻击时${'stats'}${'bonus'}`,
			scale_attributes_bonus: tp`，每多1种${'bonus'}，最大${'max'}种时${'stats_max'}`,
			scale_combos: tp`${'min'}连击以上时${'stats'}${'bonus'}`,
			scale_combos_bonus: tp`，每多1连击${'bonus'}，最大${'max'}连击时${'stats_max'}`,
			scale_match_attrs: tp`${'matches'}中${'min'}串匹配时${'stats'}${'bonus'}`,
			scale_match_attrs_bonus: tp`，每多1串${'bonus'}，最大${'max'}串时${'stats_max'}`,
			scale_match_length: tp`${'in_once'}相连消除${'min'}个${'orbs'}时${'stats'}${'bonus'}`,
			scale_match_length_bonus: tp`，每多1个${'bonus'}，最大${'max'}个时${'stats_max'}`,
			scale_cross: tp`每以十字形式消除5个${'orbs'}1次时${'stats'}`,
			scale_cross_single: tp`以十字形式消除5个${'orbs'}时${'stats'}`,
			scale_state_kind_count: tp`以队伍中${'awakenings'}${'attrs'}${'types'}的数量提升，每个${'stats'}`,
		},
		cond: {
            unknown: tp`[ Unknown condition ]`,
			hp_equal: tp`When ${'hp'} == ${'min'} `,
			hp_less_or_equal: tp`When ${'hp'} ≤ ${'max'} `,
			hp_greater_or_equal: tp`When ${'hp'} ≥ ${'min'} `,
			hp_belong_to_range: tp`When ${'hp'} ∈ [${'min'},${'max'}] `,
			use_skill: tp`When skills used `,
			multi_player: tp`When in Multiplayer Mode `,
			remain_orbs: tp`When ≤ ${'value'} Orbs on
			the board `,
			exact_combo: tp`When exactly ${'value'} combos `,
			exact_match_length: tp`When matching exactly ${'value'}${'orbs'} `,
			exact_match_enhanced: tp` orbs including enhanced`,

			compo_type_card: tp`When ${'ids'} are all on team`,
			compo_type_series: tp`When all subs from ${'ids'} collab (Needs at least 1 sub) `,
			compo_type_evolution: tp`When all monsters in team are ${'ids'} `,

			L_shape: tp`When matching an L shape of 5 ${'orbs'} `,
			heal: tp`When healing at least ${'heal'} ${'stats'} with ${'orbs'} `,
		},
		position: {
			top: tp`${'pos'} of top rows`,
			bottom: tp`${'pos'} of bottom rows`,
			left: tp`${'pos'} of left columns`,
			right: tp`${'pos'} of right columns`,
			shape: tp`specified location`,
		},
        value: {
            unknown: tp`[ Unknown value: ${'type'}]`, //type
			const: tp`${'value'} ${'unit'}`,
			const_to: tp`to ${'value'}`,
			mul_percent: tp`${'value'}%`,
			mul_times: tp`×${'value'}`,
			mul_of_percent: tp`${'stats'}'s ${'value'}%`,
			mul_of_times: tp`${'stats'} ×${'value'}`,
			hp_scale: tp`when ${'hp'} == 100% is ${'min'} and ${'hp'} == 1 is ${'max'}`,
			random_atk: tp`${'atk'} ×${'min'}${'max'}`,
			prob: tp`${'value'} chance for `,
			x_awakenings: tp`count of ${'awakenings'} ×${'value'}`,
		},
		target: {
			self: tp`card's`,
			enemy: tp`Enemy`,
			team: tp`team`,
			team_last: tp`the lastest member`,
			enemy_all: tp`all enemys`,
			enemy_one: tp`1 enemy`,
			enemy_attr: tp`${'attr'} enemy`,
		},
        stats: {
            unknown: tp`[ Unknown: ${'type'}]`, //type
            maxhp: tp`Max HP`,
            hp: tp`HP`,
            chp: tp`current HP`,
            atk: tp`ATK`,
			rcv: tp`RCV`,
            teamhp: tp`Team HP`,
            teamatk: tp`Team ${'attrs'} ATK`,
            teamrcv: tp`Team RCV`,
        },
		unit: {
			orbs: tp``,
			times: tp` times`,
			seconds: tp` seconds`,
			point: tp` point`,
			turns: tp` turns`,
		},
		word: {
			comma: tp`, `, //逗号
			slight_pause: tp`, `, //顿号
			range_hyphen: tp`~`, //范围连字符
			in_once: tp`in onece`,
			evo_type_pixel: tp`Pixel Evo`,
			evo_type_reincarnation: tp`Reinc. or Super Reinc. Evo`,
			evo_type_unknow: tp`Unknown Evo`,
			affix_attr: tp`${'cotent'} attr.`, //词缀-属性
			affix_orb: tp`${'cotent'} orbs`, //词缀-宝珠
			affix_type: tp`${'cotent'} types`, //词缀-类型
			affix_awakening: tp`${'cotent'} awoken`, //词缀-觉醒
			affix_exclude: tp`exclude ${'cotent'}`, //词缀-属性
		},
		attrs: {
			[0]: tp`${'icon'}Fire`,
			[1]: tp`${'icon'}Water`,
			[2]: tp`${'icon'}Wood`,
			[3]: tp`${'icon'}Light`,
			[4]: tp`${'icon'}Dark`,
			[5]: tp`${'icon'}Recover`,
			[6]: tp`${'icon'}Null`,
			all: tp`All`,
			self: tp`${'icon'}Self's Attr`,
			fixed: tp`${'icon'}Fixed`,
		},
		orbs: {
			[0]: tp`${'icon'}Fire`,
			[1]: tp`${'icon'}Water`,
			[2]: tp`${'icon'}Wood`,
			[3]: tp`${'icon'}Light`,
			[4]: tp`${'icon'}Dark`,
			[5]: tp`${'icon'}Heal`,
			[6]: tp`${'icon'}Jammer`,
			[7]: tp`${'icon'}Poison`,
			[8]: tp`${'icon'}Lethal Poison`,
			[9]: tp`${'icon'}Bomb`,
			enhanced: tp`${'icon'}Enhanced`,
			locked: tp`${'icon'}Locked`,
			nail: tp`${'icon'}Nail`,
			variation: tp`${'icon'}Roulette (transforms every ${'time'})`,
			_5color: tp`${'icon'}5 Att.`,
			_6color: tp`${'_5color'}+${'orb_rcv'}`,
			all: tp`All`,
			any: tp`Any ${'cotent'}`,
		},
		types: {
			[0]: tp`${'icon'}Evo Material`,
			[1]: tp`${'icon'}Balanced`,
			[2]: tp`${'icon'}Physical`,
			[3]: tp`${'icon'}Healer`,
			[4]: tp`${'icon'}Dragon`,
			[5]: tp`${'icon'}God`,
			[6]: tp`${'icon'}Attacker`,
			[7]: tp`${'icon'}Devil`,
			[8]: tp`${'icon'}Machine`,
			[9]: tp`${'icon'}Special Protection`,
			[12]: tp`${'icon'}Awaken`,
			[14]: tp`${'icon'}Enhance Material`,
			[15]: tp`${'icon'}Redeemable`,
		},
    },
    /*skill_parse: {
        skill: {
            unknown: ()=>`Unknown skill type.`,
            active_turns: (turns, activeElement)=> [activeElement,`, for ${turns} turns.`],
            random_skills: (skillList)=>[`Activates these random skills:`, skillList],
            delay: ()=> `Delays enemies' next move`,
            mass_attack: ()=> `plus Mass Attack`,
            leader_change: ()=> `Switches places with Leader Monster; use again to switch back`,
            no_skyfall: ()=> `No Skyfall Combos`,
            heal: (valueElement)=> [`Recovers `, valueElement, ` as HP`],
            defense_break:  (valueElement)=> [`Reduce enemies' defense by `, valueElement],
            poison: (valueElement)=> [`Poisons all enemies, inflict damage equal to `, valueElement, ` every turn`],
            time_extend: (valueElement)=> [`Orb move time `, valueElement],
            follow_attack: (valueElement)=> [`Inflicts a bonus attack equal to `, valueElement, ` when matching Orbs`],
            auto_heal: (valueElement)=> [`Heals HP equal to `, valueElement, ` when matching Orbs`],
            ctw: (valueElement)=> [`Move Orbs freely for `, valueElement],
            gravity: (valueElement)=> [`Reduces enemies's `, valueElement],
            resolve: (stats, valueElement, probability)=> [probability<100 ? `There's a ${probability}% chance, `:'',`May leave you with 1 HP in a single hit reduced to 0, when your `, stats, ` is ≧` ,valueElement],
        },
        value: {
            unknown: (type)=>`[ unknown value: ${type}]`,
			mul: (value, showPercent) => showPercent ? `${(value * 100).keepCounts()}%` : `${value.keepCounts()}x`,
			const: (value, unit)=> `${value}${unit ? ` ${unit}` : ''}`,
			mul_maxhp: (value, stats, showPercent) => showPercent ? [`${(value * 100).keepCounts()}% of `, stats] : [stats,` ${value.keepCounts()}x`],
            mul_hp: (value, stats, showPercent) => showPercent ? [`${(value * 100).keepCounts()}% of `, stats] : [stats,` ${value.keepCounts()}x`],
            mul_atk: (value, stats, showPercent) => showPercent ? [`${(value * 100).keepCounts()}% of `, stats] : [stats,` ${value.keepCounts()}x`],
            mul_rcv: (value, stats, showPercent) => showPercent ? [`${(value * 100).keepCounts()}% of `, stats] : [stats,` ${value.keepCounts()}x`],
        },
        stats: {
            unknown: (type)=>`[ unknown stats: ${type}]`,
            maxhp: ()=>`Max HP`,
            hp: (enemy)=>`${enemy?`remaining`:`own`} HP`,
            atk: (enemy)=>`${enemy?`remaining`:`own`} ATK`,
            rcv: (enemy)=>`${enemy?`remaining`:`own`} RCV`,
            teamatk: ()=>`Team ATK`,
            teamrcv: ()=>`Team RCV`,
        },
        unit: {
            seconds : `sec`,
        },
    },*/
}
deepMerge(localTranslating, _localTranslating);
localisation(localTranslating);